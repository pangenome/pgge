#!/usr/bin/env bash

# exit when any command fails
set -eo pipefail

input_gfa=false
input_fasta=false
input_gaf=false
input_graph_names=false
output_dir="."
splitfa=false
seq_length=false
step=false
beehave_R=false
peanut_bed=false
subsample_percentage=false
subsample_number=false
threads=1

num_gfas=0
num_input_graph_names=0

if [ "$#" -eq 0 ];
then
    show_help=true
fi 

## TODO add options for GraphAligner

# read the options
cmd=$0" "$@
TEMP=`getopt -o g:f:i:n:r:o:l:s:p:u:t:hb --long input-gfa:,input-fasta:,input-gaf:,input-graph-names:,beehave-r:,output-dir:,seq-length:,step:,subsample-percentage:,subsample-number:,threads:,help,peanut-bed -n 'pgge' -- "$@"`
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -g|--input-gfa) input_gfa=$2 ; shift 2 ;;
        -f|--input-fasta) input_fasta=$2 ; shift 2 ;;
        -i|--input-gaf) input_gaf=$2 ; shift 2 ;;
        -n|--input-graph-names) input_graph_names=$2 ; shift 2 ;;
        -r|--beehave-r) beehave_R=$2 ; shift 2 ;;
        -o|--output-dir) output_dir=$2 ; shift 2 ;;
        -l|--seq-length) seq_length=$2 ; shift 2 ;;
        -s|--step) step=$2 ; shift 2 ;;
        -p|--subsample-percentage) subsample_percentage=$2 ; shift 2 ;;
        -u|--subsample-number) subsample_number=$2 ; shift 2 ;;
        -b|--peanut-bed) peanut_bed=true ; shift ;;
        -t|--threads) threads=$2 ; shift 2 ;;
        -h|--help) show_help=true ; shift ;;
        --) shift ; break ;;
        *) echo "$2" "Internal error!" ; exit 1 ;;
    esac
done

# TODO Both subsample options can't be set at the same time

if [[
    "$input_gaf" == false
    ]];
then
    if [[
           "$input_fasta" == false
        || "$input_gfa" == false
        || "$beehave_R" == false
    ]];
    then
    show_help=true
    >&2 echo "Mandatory arguments -g, -f, -r. If running in GAF-MODE, only -i, -r are required."
    fi
else
    if [[
           "$input_fasta" != false
        || "$input_gfa" != false
    ]];
    then
    show_help=true
    >&2 echo "Running in GAF-MODE, only -i, -r are a mandatory argument. Please remove any non GAF-MODE arguments -g, -f, -r."
    fi
fi

# do we need to use splitfa?
if [[
    "$seq_length" != false
    ]];
then
    if [[
        "$step" == false
    ]];
    then
        show_help=true
        >&2 echo "Mandatory arguments to run splitfa are -l and -s."
    fi
fi

if [[
    "$step" != false
    ]];
then
    if [[
        "$seq_length" == false
    ]];
    then
        show_help=true
        >&2 echo "Mandatory arguments to run splitfa are -l and -s."
    fi
fi

if [[ "$subsample_number" != false && "$subsample_percentage" != false ]];
then
        show_help=true
        >&2 echo "Only one of -p/--subsample-percentage, -u/--subsample-number can be chosen for the subsampling step."
fi

prefix_pgge=pgge

if [[
    $step != false ]] && [[ $seq_length != false
    ]];
then
    splitfa=true
    prefix_pgge="$prefix_pgge"-l$seq_length-s$step
fi

if [[ "$subsample_number" != false ]];
then
    prefix_pgge="$prefix_pgge"-u"$subsample_number"
fi

if [[ "$subsample_percentage" != false ]];
then
    prefix_pgge="$prefix_pgge"-p"$subsample_percentage"
fi

if [ $show_help ];
then
    #padding=`printf %${#0}s` # prints as many spaces as the length of $0
    echo "usage:    $0 -g <input-gfa> -f <input-fasta> -r <beehave-r> [options]"
    echo
    echo "GAF-MODE: $0 -i <input-gaf> [options]"
    echo
    echo "options:"
    echo "   [evaluation]"
    echo "    -g, --input-gfa FILE         input GFA file"
    echo "    -f, --input-fasta FILE       input FASTA file (uncompressed or gzipped)"
    echo "    -o, --output-dir FILE        output directory"
    echo "    -r, --beehave-r PATH         path to beehave.R"
    echo "    -b, --peanut-bed PATH        output BED file"  
    echo "    -n, --input-graph-names TSV  input graph name file: first row is the name of the original input file, second row is the display name in the PNG"    
    echo "   [splitfa]"
    echo "    -l, --seq-length N           length of the splits"
    echo "    -s, --step N                 step size between splits"
    echo "   [subsampling]"
    echo "    -p, --subsample-percentage N length of the splits"
    echo "    -u, --subsample-number N     step size between splits"    
    echo "   [evaluation-gaf-mode]"
    echo "    -i, --input-gaf FILE         input GAF file"
    echo "   [general]"
    echo "    -t, --threads N              number of compute threads to use in parallel steps"
    echo "    -h, --help                   this text"
    echo
    echo "Uses GraphAligner and peanut to evaluate a pangenome graph. Utilizes samtools and splitfa."
    exit
fi

if [[ "$output_dir" != "" ]]; then
	if [ ! -e "$output_dir" ]; then
		mkdir "$output_dir"
	fi
fi

date=`date "+%m-%d-%Y_%H:%M:%S"`
log_file=$output_dir/$prefix_pgge.$date.log
param_file=$output_dir/$prefix_pgge.$date.params.yml

prefix_pgge="$output_dir"/$prefix_pgge

fmt="%C\n%Us user %Ss system %P cpu %es total %MKb max memory"
timer=time

# write parameters to log_file:
echo -e "Starting pgge on `date`\n" > "$log_file"
echo -e "Command: $cmd\n" >> "$log_file"
echo -e "PARAMETERS\n" >> "$log_file"

cat <<EOT | tee -a "$log_file" "$param_file" >/dev/null
evaluation:
  input-gfa:          $input_gfa
  input-fasta:        $input_fasta
  output-dir:         $output_dir
  beehave-r:          $beehave_R
  peanut-bed:         $peanut_bed
  input-graph-names:  $input_graph_names
splitfa:
  seq-length:         $seq_length
  step:               $step
evaluation-gaf-mode:
  input-gaf:          $input_gaf
general:
  threads:            $threads
EOT
echo -e "\nRunning pgge\n" >> "$log_file"

# does the given input-graph-names exist?
if [[ $input_graph_names != false ]];
then
    if [[
        ! -f $input_graph_names
    ]]
    then
        >&2 echo "'$input_graph_names' graph names file does not exist! Please correct and re-run pgge."
        exit
    fi
fi

## START gfa_input
if [[ $input_gaf == false ]];
then

# do the input GFAs actually exist?
for gfa in $input_gfa
do
    if [[
        ! -f $gfa
        ]];
    then
        >&2 echo "'$gfa' GFA does not exist! Please correct and re-run pgge."
        exit
    else 
        ((num_gfas=num_gfas+1))
    fi
done

# find out if #lines == #GFAs
# echo $num_gfas
# echo $(wc -l $input_graph_names | cut -f 1 -d " ")
if [[ $input_graph_names != false ]];
then
    num_input_graph_names=$(wc -l $input_graph_names | cut -f 1 -d " ")
    if [[ $num_gfas != $num_input_graph_names ]];
    then
        >&2 echo "Number of given graph names in '$input_graph_names' does not match given number of GFAs. Please correct and re-run pgge."
            exit
    fi
fi

# Manage uncompressed or gzip compressed FASTA files
if (file "$input_fasta" | grep -q 'gzip compressed data' ) ; then
  input_fasta_uncompressed="$(echo "$input_fasta" | sed -e 's/\.[^./]*$//')"
  if [ ! -f "$input_fasta_uncompressed" ];
  then
    gunzip -k "$input_fasta" -c > "$input_fasta_uncompressed"
  fi

  input_fasta="$input_fasta_uncompressed"
fi

# do we already have a FASTA index for the input_fasta?
if [[
    ! -f "$input_fasta".fai
    ]];
then
    "$timer" -f "$fmt" samtools \
    faidx "$input_fasta" \
    2> >(tee -a "$log_file")
fi
input_fai=$input_fasta.fai

input_fasta_base="$(basename -- "$input_fasta")"
super_suffix=""

# split into samples by "." and then by "#" always taking the first hit
cut -f 1 "$input_fai" | cut -f 1 -d. | cut -f 1 -d '#' | sort | uniq | while read n; \
do $timer -f "$fmt" samtools faidx "$input_fasta" $(grep "$n" "$input_fai" | cut -f 1) > "$prefix_pgge"."$n"."$input_fasta_base"; \
done 2> >(tee -a "$log_file")

if [[
    "$splitfa" != false
    ]];
then
    cut -f 1 "$input_fai" | cut -f 1 -d. | cut -f 1 -d '#' | sort | uniq | while read n; \
    do "$timer" -f "$fmt" splitfa "$prefix_pgge"."$n"."$input_fasta_base" -l "$seq_length" -s "$step" > "$prefix_pgge"."$n"."$input_fasta_base".splitfa.fa; \
    done 2> >(tee -a "$log_file")
    super_suffix=".splitfa.fa"
fi

# only take a subset of the reads using shuf
# shuf -n $(( 112*20/100 )) cerevisiae.pan.fa.fai
# c="$(echo 1112*10/100.0 | bc)"
# shuf -n $c ~/Downloads/yeast/cerevisiae.pan.fa.fai | wc -l
# shuf -n "$(echo $(cat gammylog.txt | wc -l)*100/100.0 | bc)" gammylog.txt
if [[ "$subsample_percentage" != false ]];
then
    cut -f 1 "$input_fai" | cut -f 1 -d. | cut -f 1 -d '#' | sort | uniq | while read n; \
    do "$timer" -f "$fmt" samtools faidx "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix"; \
    done 2> >(tee -a "$log_file")
    cut -f 1 "$input_fai" | cut -f 1 -d. | cut -f 1 -d '#' | sort | uniq | while read n; \
    do 
        shuf_num="$(echo "$(cat "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix".fai | wc -l)"*"$subsample_percentage"/100.0 | bc)"
        if [[ "$shuf_num" == 0 ]];
        then
            shuf_num=1
        fi
        "$timer" -f "$fmt" shuf -n "$shuf_num" "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix".fai | cut -f 1 > "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix".fai.subsamples; \
    done 2> >(tee -a "$log_file")
    cut -f 1 "$input_fai" | cut -f 1 -d. | cut -f 1 -d '#' | sort | uniq | while read n; \
    do "$timer" -f "$fmt" xargs samtools faidx "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix" < "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix".fai.subsamples > "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix".subsamples.fa; \
    done 2> >(tee -a "$log_file")
    super_suffix="$super_suffix".subsamples.fa
fi

if [[ "$subsample_number" != false ]];
then
    cut -f 1 "$input_fai" | cut -f 1 -d. | cut -f 1 -d '#' | sort | uniq | while read n; \
    do "$timer" -f "$fmt" samtools faidx "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix"; \
    done 2> >(tee -a "$log_file")
    cut -f 1 "$input_fai" | cut -f 1 -d. | cut -f 1 -d '#' | sort | uniq | while read n; \
    do "$timer" -f "$fmt" shuf -n "$subsample_number" "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix".fai | cut -f 1 > "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix".fai.subsamples; \
    done 2> >(tee -a "$log_file")
    cut -f 1 "$input_fai" | cut -f 1 -d. | cut -f 1 -d '#' | sort | uniq | while read n; \
    do "$timer" -f "$fmt" xargs samtools faidx "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix" < "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix".fai.subsamples > "$prefix_pgge"."$n"."$input_fasta_base""$super_suffix".subsamples.fa; \
    done 2> >(tee -a "$log_file")
    super_suffix="$super_suffix".subsamples.fa
fi 

for gfa in $input_gfa
do
    gfa_base="$(basename -- "$gfa")"

    cut -f 1 "$input_fai" | cut -f 1 -d. | cut -f 1 -d '#' | sort | uniq | while read n; \
    do
        graph_aligner_fasta_input="$prefix_pgge"."$n"."$input_fasta_base""$super_suffix"
        "$timer" -f "$fmt" GraphAligner \
            -g "$gfa" \
            -f "$graph_aligner_fasta_input" \
            -a "$prefix_pgge"."$n"."$gfa_base".gaf \
            -x vg \
            -t "$threads" \
            2> >(tee -a "$log_file")
        ("$timer" -f "$fmt" cut -f 2,3,4,16 "$prefix_pgge"."$n"."$gfa_base".gaf \
            | sed s/id:f:// \
            | LC_NUMERIC=de_DE.UTF-8 awk '{ len=$3-$2; tlen+=len; sum+=$4*len; } END { print sum / tlen }' \
            | tr "\n" "\t" \
            1> "$prefix_pgge"."$n"."$gfa_base".gaf.pgge) 2> >(tee -a "$log_file")
        if [[ 
            "$peanut_bed" == false 
            ]];
        then            
            ("$timer" -f "$fmt" peanut \
                -g "$prefix_pgge"."$n"."$gfa_base".gaf \
                1>> "$prefix_pgge"."$n"."$gfa_base".gaf.pgge) 2> >(tee -a "$log_file");
        else
            ("$timer" -f "$fmt" peanut \
                -g "$prefix_pgge"."$n"."$gfa_base".gaf \
                -b "$prefix_pgge"."$n"."$gfa_base".bed \
                1>> "$prefix_pgge"."$n"."$gfa_base".gaf.pgge) 2> >(tee -a "$log_file");
        fi                
    done
done

## END gfa_input
else
## START gaf_input
# does the input GFA actually exist?
if [[
    ! -f "$input_gaf"
    ]];
then
    >&2 echo "'$input_gaf' GAF does not exist! Please correct and re-run pgge."
    exit
fi

echo "$input_gaf"
input_gaf_base="$(basename -- "$input_gaf")"

("$timer" -f "$fmt" cut -f 2,3,4,16 "$input_gaf" \
    | sed s/id:f:// \
    | LC_NUMERIC=de_DE.UTF-8 awk '{ len=$3-$2; tlen+=len; sum+=$4*len; } END { print sum / tlen }' \
    | tr "\n" "\t" \
    1> "$prefix_pgge"."$input_gaf_base".pgge) 2> >(tee -a "$log_file")
("$timer" -f "$fmt" peanut \
    -g "$input_gaf" \
    1>> "$prefix_pgge"."$input_gaf_base".pgge) 2> >(tee -a "$log_file");

fi
## END gaf_input

if [[ "$input_graph_names" == false ]];
then
    (echo sample.name cons.jump aln.id qsc uniq multi nonaln; ls "$output_dir" | grep gaf | grep pgge$ | while read f; \
    do
    echo "$(echo "$output_dir"/"$f" | cut -f 2 -d .)" "$(echo "$output_dir"/"$f" | cut -f 2 -d @ | cut -f 1 -d.)" "$(cat "$output_dir"/"$f")"; \
    done) | tr ' ' '\t' > "$prefix_pgge".tsv
    "$timer" -f "$fmt" Rscript \
        "$beehave_R" "$prefix_pgge".tsv \
        "$prefix_pgge".tsv.png \
        2> >(tee -a "$log_file")
else 
    (echo sample.name cons.jump aln.id qsc uniq multi nonaln; ls "$output_dir" | grep gaf | grep pgge$ | while read f; \
    do
    echo "$(echo "$output_dir"/"$f" | cut -f 2 -d .)" "$(basename $(echo "$output_dir"/"$f"))" "$(cat "$output_dir"/"$f")"; \
    done) | tr ' ' '\t' > "$prefix_pgge".tsv
    "$timer" -f "$fmt" Rscript \
        "$beehave_R" "$prefix_pgge".tsv \
        "$prefix_pgge".tsv.png \
        "$input_graph_names" \
        2> >(tee -a "$log_file")
fi